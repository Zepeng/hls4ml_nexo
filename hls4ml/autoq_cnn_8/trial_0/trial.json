{"trial_id": "0", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "conv2d_48_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_49_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_50_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_51_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_52_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_53_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_54_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_55_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "conv2d_56_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "dense_11_kernel_quantizer", "default": "binary", "conditions": [], "values": ["binary", "stochastic_binary", "ternary", "stochastic_ternary", "quantized_bits(2,1,1,alpha=1.0)", "quantized_bits(4,0,1)", "quantized_bits(8,0,1)", "quantized_po2(4,1)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_48", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_48_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_14_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_49", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_49_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_15_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_50", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_50_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_16_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_51", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_51_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_17_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_52", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_52_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_53", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_53_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_18_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_54", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_54_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_19_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_55", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_55_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_conv2d_56", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "conv2d_56_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "activation_20_activation_quantizer", "default": "binary", "conditions": [], "values": ["binary", "binary(alpha='auto_po2')", "ternary", "quantized_relu(3,1)", "quantized_relu(4,2)", "quantized_relu(8,2)", "quantized_relu(8,4)", "quantized_relu(16,8)", "quantized_relu_po2(4,4)"], "ordered": false}}, {"class_name": "Choice", "config": {"name": "network_filters_dense_11", "default": 1.0, "conditions": [], "values": [0.5, 0.75, 1.0, 1.5, 2.0], "ordered": true}}, {"class_name": "Choice", "config": {"name": "dense_11_bias_quantizer", "default": "quantized_bits(4,0,1)", "conditions": [], "values": ["quantized_bits(4,0,1)", "quantized_bits(8,3,1)", "quantized_po2(4,8)"], "ordered": false}}], "values": {"conv2d_48_kernel_quantizer": "quantized_bits(4,0,1)", "conv2d_49_kernel_quantizer": "binary", "conv2d_50_kernel_quantizer": "stochastic_ternary", "conv2d_51_kernel_quantizer": "ternary", "conv2d_52_kernel_quantizer": "quantized_po2(4,1)", "conv2d_53_kernel_quantizer": "ternary", "conv2d_54_kernel_quantizer": "quantized_bits(2,1,1,alpha=1.0)", "conv2d_55_kernel_quantizer": "binary", "conv2d_56_kernel_quantizer": "stochastic_ternary", "dense_11_kernel_quantizer": "stochastic_binary", "network_filters_conv2d_48": 2.0, "conv2d_48_bias_quantizer": "quantized_bits(8,3,1)", "activation_14_activation_quantizer": "quantized_relu_po2(4,4)", "network_filters_conv2d_49": 0.5, "conv2d_49_bias_quantizer": "quantized_po2(4,8)", "activation_15_activation_quantizer": "binary", "network_filters_conv2d_50": 1.0, "conv2d_50_bias_quantizer": "quantized_bits(4,0,1)", "activation_16_activation_quantizer": "ternary", "network_filters_conv2d_51": 1.0, "conv2d_51_bias_quantizer": "quantized_po2(4,8)", "activation_17_activation_quantizer": "quantized_relu(4,2)", "network_filters_conv2d_52": 1.0, "conv2d_52_bias_quantizer": "quantized_bits(8,3,1)", "network_filters_conv2d_53": 0.5, "conv2d_53_bias_quantizer": "quantized_bits(4,0,1)", "activation_18_activation_quantizer": "quantized_relu(8,4)", "network_filters_conv2d_54": 1.5, "conv2d_54_bias_quantizer": "quantized_po2(4,8)", "activation_19_activation_quantizer": "ternary", "network_filters_conv2d_55": 0.5, "conv2d_55_bias_quantizer": "quantized_bits(4,0,1)", "network_filters_conv2d_56": 2.0, "conv2d_56_bias_quantizer": "quantized_bits(8,3,1)", "activation_20_activation_quantizer": "quantized_relu(3,1)", "network_filters_dense_11": 1.5, "dense_11_bias_quantizer": "quantized_po2(4,8)"}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/base_tuner.py\", line 250, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/base_tuner.py\", line 215, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/tuner.py\", line 286, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/tuner.py\", line 212, in _build_and_fit_model\n    model = self._try_build(hp)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/tuner.py\", line 154, in _try_build\n    model = self._build_hypermodel(hp)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras_tuner/engine/tuner.py\", line 145, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/qkeras/autoqkeras/autoqkeras_internal.py\", line 571, in build\n    q_model, _ = self.quantize_model(hp)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/qkeras/autoqkeras/autoqkeras_internal.py\", line 557, in quantize_model\n    q_model = model_quantize(\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/qkeras/utils.py\", line 805, in model_quantize\n    qmodel = quantized_model_from_json(json.dumps(jm), custom_objects)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/qkeras/utils.py\", line 894, in quantized_model_from_json\n    qmodel = model_from_json(json_string, custom_objects=custom_objects)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/saving/legacy/model_config.py\", line 109, in model_from_json\n    return deserialize_from_json(json_string, custom_objects=custom_objects)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/layers/serialization.py\", line 275, in deserialize_from_json\n    return deserialize(config, custom_objects)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/layers/serialization.py\", line 252, in deserialize\n    return serialization.deserialize_keras_object(\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/saving/legacy/serialization.py\", line 517, in deserialize_keras_object\n    deserialized_obj = cls.from_config(\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/engine/training.py\", line 3114, in from_config\n    inputs, outputs, layers = functional.reconstruct_from_config(\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/engine/functional.py\", line 1482, in reconstruct_from_config\n    if process_node(layer, node_data):\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/engine/functional.py\", line 1422, in process_node\n    output_tensors = layer(input_tensors, **kwargs)\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/home/zel032/software/miniconda3/envs/hls4ml/lib/python3.8/site-packages/keras/layers/merging/base_merge.py\", line 74, in _compute_elemwise_op_output_shape\n    raise ValueError(\nValueError: Inputs have incompatible shapes. Received shapes (200, 255, 32) and (200, 255, 16)\n"}